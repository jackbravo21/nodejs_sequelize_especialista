Abaixo, você pode encontrar uma referência de cores do texto a ser comandada ao executar o aplicativo node.js.

console.log('\x1b[36m%s\x1b[0m', 'I am cyan');  //cyan
console.log('\x1b[33m%s\x1b[0m', stringToMakeYellow);  //yellow
Nota %s eh onde a string (o segundo argumento) eh injetada. \x1b[0mre define a cor do terminal para que não continue mais a cor escolhida após esse ponto.

Referência de cores

Reset = "\x1b[0m"
Bright = "\x1b[1m"
Dim = "\x1b[2m"
Underscore = "\x1b[4m"
Blink = "\x1b[5m"
Reverse = "\x1b[7m"
Hidden = "\x1b[8m"

FgBlack = "\x1b[30m"
FgRed = "\x1b[31m"
FgGreen = "\x1b[32m"
FgYellow = "\x1b[33m"
FgBlue = "\x1b[34m"
FgMagenta = "\x1b[35m"
FgCyan = "\x1b[36m"
FgWhite = "\x1b[37m"

BgBlack = "\x1b[40m"
BgRed = "\x1b[41m"
BgGreen = "\x1b[42m"
BgYellow = "\x1b[43m"
BgBlue = "\x1b[44m"
BgMagenta = "\x1b[45m"
BgCyan = "\x1b[46m"
BgWhite = "\x1b[47m"


Existem vários pacotes disponíveis para formatar o texto do console no Node.js. Os mais populares são:

chalk
cli-color
colors

Uso:
GIZ:

const chalk = require('chalk');
console.log(chalk.red('Text in red'));
CLI-COLOR:

const clc = require('cli-color');
console.log(clc.red('Text in red'));
CORES:

const colors = require('colors');
console.log('Text in red'.red);
Muitas pessoas notaram sua desaprovação de colorsalterar o protótipo String . Se você preferir que seus protótipos sejam deixados em paz, use o seguinte código:

const colors = require('colors/safe');
console.log(colors.red('Text in red'));